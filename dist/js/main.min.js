/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/js/main.js":
/*!*************************!*\
  !*** ./dist/js/main.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\nclass Client {\n    constructor(data) {\n        this.lastName = data.lastName;\n        this.firstName = data.firstName;\n        this.patronymic = data.patronymic;\n        this.identificationNumber = data.identificationNumber;\n        this.isActiveClient = data.isActiveClient;\n        this.creditAccounts = data.creditAccounts;\n        this.debitAccounts = data.debitAccounts;\n        this.registrationDate = data.registrationDate;\n    }\n}\nclass FetchService {\n    request(url) {\n        return fetch(url).then((result) => result.json());\n    }\n}\nclass Bank {\n    constructor(root) {\n        this.root = root;\n        this.clients = [];\n        this.getCurses();\n        let clients = localStorage.getItem(\"clients\");\n        if (clients !== null) {\n            this.clients = JSON.parse(clients);\n        }\n    }\n    clientListAction() {\n        this.root.innerHTML = \"\";\n        this.root.appendChild(this.createClientList());\n    }\n    createClientAction() {\n        this.root.innerHTML = \"\";\n        this.root.appendChild(this.createClientForm(null, 'create-client'));\n    }\n    createAccountAction() {\n        this.root.innerHTML = \"\";\n        this.root.appendChild(this.createSearchClientForm('account'));\n    }\n    editAction() {\n        this.root.innerHTML = \"\";\n        this.root.appendChild(this.createSearchClientForm('edit'));\n    }\n    countAction() {\n        this.root.innerHTML = \"\";\n        this.root.appendChild(this.createCalculationForm());\n    }\n    getCurses() {\n        const fetchPost = new FetchService();\n        fetchPost\n            .request(\"https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11\")\n            .then((response) => {\n            let uahCourse = { ccy: 'UAH', base_ccy: 'UAH', buy: '1.00', sale: '1.00' };\n            response.push(uahCourse);\n            localStorage.setItem('currancyCourse', JSON.stringify(response));\n        })\n            .catch(error => console.error(error));\n    }\n    createButton(type, className, text) {\n        let button = document.createElement('button');\n        button.type = type;\n        button.classList.add(className);\n        button.innerText = text;\n        return button;\n    }\n    createInput(type, name, placeholder, value) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.name = name;\n        input.placeholder = placeholder;\n        input.value = value || \" \";\n        return input;\n    }\n    createTitle(type, text, className) {\n        const title = document.createElement(type);\n        title.innerText = text;\n        title.classList.add(className);\n        return title;\n    }\n    createSelect(name, options, values) {\n        let select = document.createElement('select');\n        select.name = name;\n        options.forEach((option, index) => {\n            select.options[index] = new Option(option, values[index]);\n        });\n        return select;\n    }\n    createClientList() {\n        let table = document.createElement(\"table\");\n        table.className = 'table';\n        let client;\n        for (client of this.clients) {\n            let tr = document.createElement(\"tr\");\n            let item;\n            for (item in client) {\n                let th = document.createElement(\"th\");\n                th.innerHTML = item;\n                if (item === 'debitAccounts' || item === 'creditAccounts') {\n                    let data = document.createElement(\"td\");\n                    let property;\n                    for (property of client[item]) {\n                        let br = document.createElement(\"br\");\n                        let key, value;\n                        for ([key, value] of Object.entries(property)) {\n                            let th = document.createElement(\"th\");\n                            let td = document.createElement(\"td\");\n                            th.innerHTML = key;\n                            td.innerHTML = value.toString();\n                            data.append(th, td);\n                        }\n                        data.append(br);\n                    }\n                    tr.append(th, data);\n                }\n                else {\n                    let th = document.createElement(\"th\");\n                    let td = document.createElement(\"td\");\n                    th.innerHTML = item;\n                    td.innerHTML = client[item];\n                    tr.append(th, td);\n                }\n            }\n            table.append(tr);\n        }\n        return table;\n    }\n    createClientForm(clientData, className) {\n        clientData = clientData || 0;\n        let form = document.createElement('form');\n        form.innerHTML = `\r\n      <input type='text' placeholder = 'Введите фамилию' name = 'lastName' value=\r\n        ${clientData.lastName || \" \"} >\r\n      <input type='text' placeholder = 'Введите имя' name = 'firstName' value=\r\n        ${clientData.firstName || \" \"} >\r\n      <input type='text' placeholder = 'Введите отчество' name = 'patronymic' value=\r\n        ${clientData.patronymic || \" \"} >\r\n      <input type='number' placeholder ='Введите ИНН' name = 'identificationNumber' value=\r\n        ${clientData.identificationNumber || \" \"} >\r\n    `;\n        let isActiveSelect = this.createSelect('isActiveClient', ['Выберите активность клиента', 'active', 'passive'], ['chose activity', true, false]);\n        let buttonSubmit = this.createButton('button', 'btn', 'Отправить');\n        buttonSubmit.addEventListener(\"click\", this.onAddClient.bind(this));\n        form.classList.add(className);\n        form.append(isActiveSelect, buttonSubmit);\n        return form;\n    }\n    onAddClient(event) {\n        event.preventDefault();\n        let data = new FormData(event.target.closest(\"form\"));\n        if (event.target.closest('form').classList.contains('update-client')) {\n            let currentClient = JSON.parse(localStorage.getItem('currentClient'));\n            data.forEach((value, name) => {\n                Object.assign(currentClient, { [name]: value });\n            });\n            let index = Number(localStorage.getItem('currentClientIndex'));\n            this.clients[index] = currentClient;\n            localStorage.setItem(\"clients\", JSON.stringify(this.clients));\n            this.editAction();\n        }\n        else {\n            let сlientData = {\n                registrationDate: new Date().toLocaleDateString(),\n                creditAccounts: [],\n                debitAccounts: [],\n                lastName: '',\n                firstName: '',\n                patronymic: '',\n                identificationNumber: 0,\n                isActiveClient: true,\n            };\n            data.forEach((value, name) => {\n                Object.assign(сlientData, { [name]: value });\n            });\n            this.clients.push(сlientData);\n            localStorage.setItem(\"clients\", JSON.stringify(this.clients));\n            this.createClientAction();\n        }\n    }\n    createEditButtonGroup() {\n        let buttonGroup = document.createElement(\"div\");\n        let updateButton = this.createButton(\"button\", \"options\", \"Редактировать\");\n        updateButton.addEventListener('click', this.onUpdateClient.bind(this));\n        let deleteButton = this.createButton(\"button\", \"options\", \"Удалить\");\n        deleteButton.addEventListener('click', this.onDeleteClient.bind(this));\n        buttonGroup.append(updateButton, deleteButton);\n        buttonGroup.classList.add('button-group');\n        return buttonGroup;\n    }\n    onUpdateClient(event) {\n        event.preventDefault();\n        if (this.root.querySelector(\".update-client\")) {\n            this.root.querySelector(\".update-client\").remove();\n        }\n        let currentClient = JSON.parse(localStorage.getItem('currentClient'));\n        this.root.appendChild(this.createClientForm(currentClient, 'update-client'));\n    }\n    onDeleteClient(event) {\n        event.preventDefault();\n        let index = Number(localStorage.getItem('currentClientIndex'));\n        this.clients.splice(index, 1);\n        localStorage.setItem(\"clients\", JSON.stringify(this.clients));\n        this.root.appendChild(this.createTitle('p', 'Клиент был удален', 'message'));\n    }\n    createSearchClientForm(className) {\n        let form = document.createElement(\"form\");\n        let identificationNumberInput = this.createInput('number', 'identificationNumber', 'Введите ИНН клиента');\n        let buttonSearchClient = this.createButton(\"button\", \"btn\", \"Найти\");\n        buttonSearchClient.addEventListener('click', this.onSearchClient.bind(this));\n        buttonSearchClient.addEventListener('click', this.renderForm.bind(this));\n        form.append(identificationNumberInput, buttonSearchClient);\n        form.classList.add(className);\n        return form;\n    }\n    onSearchClient(event) {\n        event.preventDefault();\n        let currentClient = this.clients.\n            find(client => client.identificationNumber ===\n            event.target.closest(\"form\").identificationNumber.value);\n        let currentClientIndex = this.clients.\n            findIndex(client => client.identificationNumber ===\n            event.target.closest(\"form\").identificationNumber.value);\n        if (this.root.querySelector(\".message\")) {\n            this.root.querySelector(\".message\").remove();\n        }\n        if (this.root.querySelector(\".table\")) {\n            this.root.querySelector(\".table\").remove();\n        }\n        if (this.root.querySelector(\".title\")) {\n            this.root.querySelector(\".title\").remove();\n        }\n        if (this.root.querySelector(\".input-group\")) {\n            this.root.querySelector(\".input-group\").remove();\n        }\n        if (this.root.querySelector(\".button-group\")) {\n            this.root.querySelector(\".button-group\").remove();\n        }\n        if (this.root.querySelector(\".debit-account\")) {\n            this.root.querySelector(\".debit-account\").remove();\n        }\n        if (this.root.querySelector(\".credit-account\")) {\n            this.root.querySelector(\".credit-account\").remove();\n        }\n        if (this.root.querySelector(\".update-client\")) {\n            this.root.querySelector(\".update-client\").remove();\n        }\n        if (!currentClient) {\n            let message = this.createTitle('p', 'Клиент с данным ИНН не найден', 'message');\n            this.root.appendChild(message);\n            event.stopImmediatePropagation();\n        }\n        this.showClient(currentClient);\n        localStorage.setItem('currentClient', JSON.stringify(currentClient));\n        localStorage.setItem('currentClientIndex', JSON.stringify(currentClientIndex));\n    }\n    renderForm(event) {\n        if (event.target.closest('form').className === 'account') {\n            this.root.appendChild(this.createTitle('div', 'Какой счет Вы хотите открыть?', 'title'));\n            this.root.appendChild(this.createRadioInputGroup('account', ['Дебитовый счет', 'Кредитовый счет']));\n        }\n        if (event.target.closest('form').className === 'edit') {\n            this.root.appendChild(this.createTitle('div', 'Выберите действия над текущим клиентом', 'title'));\n            this.root.appendChild(this.createEditButtonGroup());\n        }\n    }\n    showClient(currentClient) {\n        let table = document.createElement(\"table\");\n        table.className = 'table';\n        let tr = document.createElement(\"tr\");\n        let item;\n        for (item in currentClient) {\n            if (item === 'creditAccounts' || item === 'debitAccounts') {\n                let th = document.createElement(\"th\");\n                let td = document.createElement(\"td\");\n                th.innerHTML = item;\n                td.innerHTML = String(currentClient[item].length);\n                tr.append(th, td);\n            }\n            else {\n                let th = document.createElement(\"th\");\n                let td = document.createElement(\"td\");\n                th.innerHTML = item;\n                td.innerHTML = currentClient[item];\n                tr.append(th, td);\n            }\n        }\n        table.append(tr);\n        this.root.append(table);\n    }\n    createRadioInputGroup(name, values) {\n        let inputGroup = document.createElement(\"div\");\n        values.forEach((value, index) => {\n            let temp = Date.now() + index;\n            let radioInput = document.createElement('input');\n            radioInput.type = 'radio';\n            radioInput.name = name;\n            radioInput.value = value;\n            radioInput.id = temp.toString();\n            let label = document.createElement('label');\n            label.innerText = value;\n            label.htmlFor = temp.toString();\n            inputGroup.append(label, radioInput);\n        });\n        inputGroup.classList.add(\"input-group\");\n        inputGroup.addEventListener('change', this.renderAccount.bind(this, inputGroup));\n        return inputGroup;\n    }\n    renderAccount(container, event) {\n        if (event.target.name === \"account\") {\n            event.preventDefault();\n            if (this.root.querySelector(\".debit-account\")) {\n                this.root.querySelector(\".debit-account\").remove();\n            }\n            if (this.root.querySelector(\".credit-account\")) {\n                this.root.querySelector(\".credit-account\").remove();\n            }\n            if (event.target.value === 'Дебитовый счет') {\n                let debitAccount = this.createDebitAccountForm();\n                this.root.appendChild(debitAccount);\n            }\n            else if (event.target.value === 'Кредитовый счет') {\n                let creditAccount = this.createCreditAccountForm();\n                this.root.appendChild(creditAccount);\n            }\n        }\n    }\n    createDebitAccountForm() {\n        let form = document.createElement(\"form\");\n        let balance = this.createInput('number', 'balance', 'Введите сумму личных средств');\n        let isActiveSelect = this.createSelect(\"isActive\", ['Выберите активность счета', 'active', 'passive'], ['chose activity', true, false]);\n        let currencyTypeSelect = this.createSelect(\"currencyType\", ['Выберите валюту', 'UAH', 'USD', 'EUR'], ['chose currancy', 'UAH', 'USD', 'EUR']);\n        let buttonAddAccount = this.createButton(\"button\", \"btn\", \"Добавить счет\");\n        buttonAddAccount.addEventListener(\"click\", this.onAddDebitAccount.bind(this));\n        form.classList.add(\"debit-account\");\n        form.append(balance, isActiveSelect, currencyTypeSelect, buttonAddAccount);\n        return form;\n    }\n    onAddDebitAccount(event) {\n        event.preventDefault();\n        let debitData = {\n            activationDate: new Date().toLocaleDateString(),\n            cardExpirationDate: new Date(new Date().\n                setFullYear(new Date().getFullYear() + 5)).toLocaleDateString(),\n            balance: 0,\n            isActive: true,\n            currencyType: 'UAH'\n        };\n        let data = new FormData(event.target.closest(\"form\"));\n        data.forEach((value, name) => {\n            Object.assign(debitData, { [name]: value });\n        });\n        let currentClient = JSON.parse(localStorage.getItem('currentClient'));\n        currentClient.debitAccounts.push(debitData);\n        let index = Number(localStorage.getItem('currentClientIndex'));\n        this.clients[index] = currentClient;\n        localStorage.setItem(\"clients\", JSON.stringify(this.clients));\n        this.createAccountAction();\n    }\n    createCreditAccountForm() {\n        let form = document.createElement(\"form\");\n        let personalFunds = this.createInput('number', 'personalFunds', 'Введите сумму личных средств');\n        let limit = this.createInput('number', 'limit', 'Введите сумму кредитного лимита');\n        let isActiveSelect = this.createSelect(\"isActive\", ['Выберите активность счета', 'active', 'passive'], ['chose activity', true, false]);\n        let currencyTypeSelect = this.createSelect(\"currencyType\", ['Выберите валюту', 'UAH', 'USD', 'EUR'], ['chose currancy', 'UAH', 'USD', 'EUR']);\n        let buttonAddAccount = this.createButton(\"button\", \"btn\", \"Добавить счет\");\n        buttonAddAccount.addEventListener(\"click\", this.onAddCreditAccount.bind(this));\n        form.classList.add(\"credit-account\");\n        form.append(personalFunds, limit, isActiveSelect, currencyTypeSelect, buttonAddAccount);\n        return form;\n    }\n    onAddCreditAccount(event) {\n        event.preventDefault();\n        let creditData = {\n            balance: Number(event.target.closest(\"form\").personalFunds.value) +\n                Number(event.target.closest(\"form\").limit.value),\n            activationDate: new Date().toLocaleDateString(),\n            cardExpirationDate: new Date(new Date().\n                setFullYear(new Date().getFullYear() + 5)).toLocaleDateString(),\n            personalFunds: 0,\n            limit: 0,\n            isActive: true,\n            currencyType: 'UAH'\n        };\n        let data = new FormData(event.target.closest(\"form\"));\n        data.forEach((value, name) => {\n            Object.assign(creditData, { [name]: value });\n        });\n        let currentClient = JSON.parse(localStorage.getItem('currentClient'));\n        currentClient.creditAccounts.push(creditData);\n        let index = Number(localStorage.getItem('currentClientIndex'));\n        this.clients[index] = currentClient;\n        localStorage.setItem(\"clients\", JSON.stringify(this.clients));\n        this.createAccountAction();\n    }\n    countMoneyAmount(currencyType) {\n        let moneyAmount = {};\n        let client;\n        for (client of this.clients) {\n            let account;\n            for (account of client.debitAccounts) {\n                if (account) {\n                    if (!moneyAmount[account.currencyType]) {\n                        moneyAmount[account.currencyType] = 0;\n                    }\n                    moneyAmount[account.currencyType] += +account.balance;\n                }\n            }\n            for (account of client.creditAccounts) {\n                if (account) {\n                    if (!moneyAmount[account.currencyType]) {\n                        moneyAmount[account.currencyType] = 0;\n                    }\n                    moneyAmount[account.currencyType] += account.balance;\n                }\n            }\n        }\n        let sumUah = 0;\n        let rate = 0;\n        let currancy;\n        for (currancy of JSON.parse(localStorage.currancyCourse)) {\n            let item;\n            for (item in moneyAmount) {\n                if (currancy.ccy === item) {\n                    sumUah += moneyAmount[currancy.ccy] * Number(currancy.sale);\n                }\n                if (currancy.ccy === currencyType) {\n                    rate = Number(currancy.sale);\n                }\n            }\n        }\n        return sumUah / rate;\n    }\n    countCommonCreditMoney(currencyType) {\n        let commonCreditMoney = {};\n        let client;\n        for (client of this.clients) {\n            let account;\n            for (account of client.creditAccounts) {\n                if (account) {\n                    if (!commonCreditMoney[account.currencyType]) {\n                        commonCreditMoney[account.currencyType] = 0;\n                    }\n                    commonCreditMoney[account.currencyType] +=\n                        account.balance - (+account.personalFunds);\n                }\n            }\n        }\n        let sumUah = 0;\n        let rate = 0;\n        let currancy;\n        for (currancy of JSON.parse(localStorage.currancyCourse)) {\n            let item;\n            for (item in commonCreditMoney) {\n                if (currancy.ccy === item) {\n                    sumUah += commonCreditMoney[currancy.ccy] * Number(currancy.sale);\n                }\n                if (currancy.ccy === currencyType) {\n                    rate = Number(currancy.sale);\n                }\n            }\n        }\n        return sumUah / rate;\n    }\n    countCreditMoney(currencyType, isActive) {\n        let creditMoney = {};\n        let client;\n        for (client of this.clients) {\n            let account;\n            for (account of client.creditAccounts) {\n                if (account) {\n                    if (!creditMoney[account.currencyType]) {\n                        creditMoney[account.currencyType] = 0;\n                    }\n                    if (client.isActiveClient === isActive) {\n                        creditMoney[account.currencyType] +=\n                            account.balance - (+account.personalFunds);\n                    }\n                }\n            }\n        }\n        let sumUah = 0;\n        let rate = 0;\n        let currancy;\n        for (currancy of JSON.parse(localStorage.currancyCourse)) {\n            let item;\n            for (item in creditMoney) {\n                if (currancy.ccy === item) {\n                    sumUah += creditMoney[currancy.ccy] * Number(currancy.sale);\n                }\n                if (currancy.ccy === currencyType) {\n                    rate = Number(currancy.sale);\n                }\n            }\n        }\n        return sumUah / rate;\n    }\n    createCalculationForm() {\n        let form = document.createElement('form');\n        let operationSelect = this.createSelect('calculations', ['Выберите тип расчета', 'Общее количество денег внутри банка', 'Общие кредитные средства', 'Кредитные средства'], ['calculationType', 'countMoneyAmount', 'countCommonCreditMoney', 'countCreditMoney']);\n        let currencyTypeSelect = this.createSelect(\"currencyType\", ['Выберите валюту', 'UAH', 'USD', 'EUR'], ['currency', 'UAH', 'USD', 'EUR']);\n        let isActiveClientSelect = this.createSelect(\"isActiveClient\", ['clients', 'active', 'passive'], ['clients', true, false]);\n        let buttonCalculate = this.createButton('button', 'btn', 'Рассчитать');\n        let output = this.createTitle('p', '0.00', 'calculation-output');\n        buttonCalculate.addEventListener('click', this.onCalculate.bind(this));\n        form.append(operationSelect, currencyTypeSelect, isActiveClientSelect, buttonCalculate, output);\n        return form;\n    }\n    onCalculate(event) {\n        event.preventDefault();\n        let operation = event.target.closest(\"form\").calculations.value;\n        let currencyType = event.target.closest(\"form\").currencyType.value;\n        let isActiveClient = event.target.closest(\"form\").isActiveClient.value;\n        let output = event.target.closest(\"form\").querySelector('p');\n        output.innerHTML = String(this[operation](currencyType, isActiveClient));\n    }\n}\nclass BankMenu {\n    constructor(root) {\n        this.root = root;\n        this.navigations = [\n            {\n                title: \"Список клиентов\",\n                isActive: false,\n                action: \"clientListAction\",\n            }, {\n                title: \"Добавить нового клиента\",\n                isActive: false,\n                action: \"createClientAction\",\n            }, {\n                title: \"Открыть счет\",\n                isActive: true,\n                action: \"createAccountAction\",\n            }, {\n                title: \"Редактирование\",\n                isActive: false,\n                action: \"editAction\",\n            }, {\n                title: \"Расчеты\",\n                isActive: false,\n                action: \"countAction\",\n            },\n        ];\n        this.render();\n    }\n    render() {\n        this.root.innerHTML = \"\";\n        let ul = document.createElement(\"ul\");\n        let div = document.createElement(\"div\");\n        this.container = new Bank(div);\n        ul.addEventListener(\"click\", this.onContainer.bind(this));\n        ul.classList.add(\"menu\");\n        for (let i = 0; i < this.navigations.length; i++) {\n            let li = document.createElement(\"li\");\n            li.setAttribute(\"data-action\", this.navigations[i].action);\n            if (this.navigations[i].isActive) {\n                li.classList.add(\"active\");\n                if (typeof this.container[this.navigations[i].action] === \"function\") {\n                    this.container[this.navigations[i].action]();\n                }\n            }\n            ul.appendChild(li);\n            let span = document.createElement(\"Span\");\n            span.innerHTML = this.navigations[i].title;\n            li.appendChild(span);\n        }\n        this.root.append(ul);\n        this.root.append(div);\n    }\n    onContainer(event) {\n        let element = event.target.closest(\"li\");\n        if (element !== null && !element.classList.contains(\"active\")) {\n            event.preventDefault();\n            let liActive = element.closest(\"ul\").querySelector(\"li.active\");\n            liActive.classList.remove(\"active\");\n            element.classList.add(\"active\");\n            let action = element.getAttribute(\"data-action\");\n            if (typeof this.container[action] === \"function\") {\n                this.container[action]();\n            }\n        }\n    }\n}\nlet root = document.getElementById(\"root\");\nlet bank = new BankMenu(root);\n\n\n//# sourceURL=webpack://gulp-2022/./dist/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/js/main.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;